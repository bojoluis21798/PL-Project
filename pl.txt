//LEGEND

//LIMITATIONS

	Recursion cannot be allowed
	selection and iteration condition can only allow boolean expressions 

//DATA TYPES

	number 
		// any number within the Java Long and Double Limitation
		// Long		-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
		// Double 	4.9 E-324 to 1.7976931348623157 E308
		
			// initialization
				// number <variable identifier> is <LITERAL> | <number variable> | <expression>
			// declaration
				// <variable identifier> is <LITERAL> | <number variable> | <expression>

	word 
		// any string that follows this regular <expression>ession:
		// \"[^\"]*\"
		// A String of length 1 can act as a char
		
			// initialization
				// word <variable identifier> is <LITERAL> | <word variable> | <<expression>ession> 
			// declaration
				// <variable identifier> is <LITERAL> | <number variable> | <<expression>ession>
	
	truth 
		// boolean
		// values can be true of false

			// initialization
				// truth <variable identifier> is <LITERAL> | <truth variable> | <<expression>ession> 
			// declaration
				// <variable identifier> is <LITERAL> | <number variable> | <<expression>ession>


//OPERATORS
	
	// all operators are left associative
	// with the hierarchy being:
		1. ()
		2. *,%,/
		3. +,-
		4. =, >, <, not
		5. and
		6. or
		7. is

	arithmetic
		// no exponent operator
		// +, -, *, /, %, ()

	relational
		// =, >, <, not =

	logical
		// and, or, not

	assignment
		<variable identifier> is <LITERAL> | <expression> | <variable identifier>
		<variable identifier> is <job identifier> using (<LITERAL> | <expression> | <variable identifier>,...)
		x is 5
		x is 5+5
		x is y
		x is square using (2) //assign with function

//VECTOR
	
	// Java Array Implementation

	numbers
		// vector of numbers
	words
		// vector of words
	truths
		// vector of truths

	// Accessing Vectors

	<ordinal number> of <vector variable identifier>

	// Inserting and Removing of List Component

	add <variable identifier> to <vector variable identifier>
		//adds it to the end of the list
	remove <ordinal number> of <vector variable identifier>
		//removes the ith member of the list

/*
// arrays (all array types are dynamic)

numbers // array of int, float, double
words // array of strings
flags //array of boolean

numbers x is (1,2,3,4,5)
numbers x

3rd of x is 5

insert 5 into 3rd of x // push
attach 4 into x // push
remove 3rd of x // pop
*/

//GROUP
	
	// Similar to structures from C
	// Can contain any number of any data type but cannot contain other groups

	// INITIALIZATION
	// data inside groups are called members
		group <variable identifier> contains 
			<data type> <member identifier>
			...
		end

		group shape contains 
			word color
			word type
		end

	// DECLARATION
		<group variable identifier> <variable identifier>

		shape x

	// define vector of groups
		<group variable identifier> groups <variable identifier> 
 
		shape groups x

	// accessing structures
		<member variable identifier> of <group variable identifier> is <LITERAL> | <variable identifier>
		color of x is "blue"

//SELECTION

	// if statement

		if (<expression>) then 
			...
		end

	// if-else statement

		if (<expression>) then 
			...
		else then
			...
		end

	// if-else else statement

		if (<expression>) then  
			...
		orif (<expression>) then
			...
		else then
			...
		end

//ITERATION

	// pre test
		// while statement

			repeat while (<expression>)
				...
			end

		// for each
			foreach item in collection 
				...
			end

	// post test
		// do-while statement  
			do this 
				...
			while (<expression>)

//PRE-DEFINED FUNCTIONS
	
	// input
		input <variable identifier> 
		input x  
	// output
		print <LITERAL> | <variable identifier> 
		print "Hello World"

	// lengthof using (<vector>)

//JOBS
	
	// functions
		job <job identifier> {outputs <data type> using (<parameter>,...)}
			...
		end

		// with output and parameter
			job square outputs number using (x)
				x*x
			end

		// with output and without parameter
			job squareNine outputs number
				return 9*9
			end

		// without output and with parameter
			job helloName using (name)
				print name
			end

		// without output and without parameter
			job printHello 
				print "Hello"
			end		

	// passing a parameter
		//pass by value
			<job name> using (<LITERAL>,<variable identifier>)
