//LEGEND

//LIMITATIONS

	Recursion cannot be allowed
	selection and iteration condition can only allow boolean expressions
	groups can contain any number of primitive data types but cannot contain other groups 

//DATA TYPES

	NUMBER 
		// any number within the Java Long and Double Limitation
		// Long		-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
		// Double 	4.9 E-324 to 1.7976931348623157 E308
		
		// DECLARATION AND INITIALIZATION
			// when declared without an identifier, a default value of 0 is given

			number <identifier> [is <number literal> | <number variable> | <expression>]

		// ASSIGNMENT

			<number variable> is <number literal> | <number variable> | <expression>

		// EXAMPLES

			// declaration
			number x

			// with a number literal
			number x is 5
			x is 5

			// with number variable
			number y is 5
			number x is y
			x is y

			// with element of number vector
			numbers y is (1, 2, 3)
			number x is 1st of y
			x is 1st of y

			// with member of group
			group cirle contains 
				number radius
				word color
			end

			circle c 
			number x is radius of c
			x is radius of c

			// with a job
			job square outputs number using (number x)
				return x * x
			end

			number x is square using (5)
			x is square using (x)

			// initialization with an expression
			number x is 5 + 10
			x is 5 - 2

	WORD 
		// any string that follows this regular <expression>ession:
		// \"[^\"]*\"
		// A String of length 1 can act as a char
		
			//DECLARATION AND INITIALIZATION
				// when declared without initialization, default value of "" (empty string)

				word <identifier> [is <word literal> | <word variable> | <expression>]

			// ASSIGNMENT

				<word variable> is <word literal> | <word variable> | <expression>

			// EXAMPLE

				// declaration
				word x

				// initialization
				word x is "Hello"
				x is "World"

				// initialization with word variable
				word y is "Hello"
				word x is y
				x is y

				// intialization with member of word vector 
				words y is ("hello", "world", "!")
				word x is 3rd of y
				x is 1st of y

				// initialization with member of group
				group circle contains
					number radius
					word color
				end

				circle c
				word x is color of c
				x is color of c

				// with a job 
				job helloWorld outputs word 

				//initialization with string expression
				word x is "Hello " + "World!"

	TRUTH 
		// boolean
		// values can only be true or false

			// DECLARATION AND INTIALIZATION
				// when declared without initialaztion, given default value of false

				truth <identifier> [is <truth literal> | <truth variable> | <expression>]

			// ASSIGNEMENT

				<truth variable> is <truth literal> | <truth variable> | <expression>

			// EXAMPLES

				// declaration
				truth x

				// with a truth literal
				truth x is true
				x is true

				// with a truth variable
				truth y is true
				truth x is y
				x is y

				// with a
				


//OPERATORS
	
	// all operators are left associative
	// with the hierarchy being:
		1. ()
		2. *,%,/
		3. +,-
		4. =, >, <, not
		5. and
		6. or
		7. is

	arithmetic
		// no exponent operator
		// +, -, *, /, %, ()

	relational
		// =, >, <, not=

	logical
		// and, or, not

	assignment
		<variable identifier> is <LITERAL> | <expression> | <variable identifier>
		<variable identifier> is <job identifier> using (<LITERAL> | <expression> | <variable identifier>,...)
		x is 5
		x is 5+5
		x is y
		x is square using (2) //assign with function

	overloaded operators
		'+' can be used for string concatination
		<string literal> | <string variable> + <string literal> 
							| <number literal> 
							| <truth literal>
							| <primitive type variable>

		print using ("Hello World" + "!")
		print using ("Number " + 5)
		print using ("the statement is" + false)

		word x is "John"
		print using ("Hello, " + x)
		print using (x + " is my name")

//GROUP
	
	// Similar to structures from C

	// INITIALIZATION
	// data inside groups are called members
		group <variable identifier> contains 
			<data type> <member identifier>
			...
		end

		group shape contains 
			word color
			word type
		end

	// DECLARATION
		<group name> <identifier>

		shape x

	// accessing structures
		<member variable identifier> of <group variable identifier> is <LITERAL> | <variable identifier>
		color of x is "blue"

		color of 3rd of x

//VECTOR
	numbers // vector of numbers
	words // vector of words
	truths // vector of truths
	
	// DECLARATION AND INITIALIZATION

		numbers <vector identifier> [is (<number literal>, ...)]
		numbers x
		numbers x is (1, 2, 3, 4, 5)
		
		// if declared without initialization, a default value of "" is given
		words <vector identifier> [is (<word literal>, ...)]
		words x
		words x is ("hello", "world", "!")

		// if declared without initialization, a default value of false is given
		truths <vector identifier> [is (<truth literal>, ...)]
		truths x
		truths x is (true, false, false)

		// we do not allow initialization of a vector of groups
		// the default values of the members are given
		<group name> groups <identifier> 
		shape groups x	

	// ACCESSING

	<ordinal number> of <vector identifier>
	3rd of x

	// OPERATIONS

	add <variable identifier> to <vector variable identifier>
		// adds it to the end of the list

	remove <ordinal number> of <vector variable identifier>
		// removes the ith member of the list
		// shinks the vector thereby moving elements to the right of the deleted element to the left by one

	// Java List Implementation
	// it is possible to assign a vector to another vector
	// there will be no vector operations (such as concatenation)

//SELECTION

	// if statement

		if (<expression>) then 
			...
		end

	// if-else statement

		if (<expression>) then 
			...
		else then
			...
		end

	// if-else else statement

		if (<expression>) then  
			...
		orif (<expression>) then
			...
		else then
			...
		end

//ITERATION

	// pre test
		// while statement

			repeat while (<expression>)
				...
			end

		// for each
			foreach item in collection 
				...
			end

	// post test
		// do-while statement  
			do this 
				...
			while (<expression>)

//PRE-DEFINED FUNCTIONS
	
	// input
		input <variable identifier> 
		input x  
	// output
		print <LITERAL> | <variable identifier> 
		print "Hello World"

	// lengthof using (<vector>)

//JOBS
	
	// functions
		job <job identifier> {outputs <data type> using (<parameter>,...)}
			...
		end

		// with output and parameter
			job square outputs number using (x)
				x*x
			end

		// with output and without parameter
			job squareNine outputs number
				return 9*9
			end

		// without output and with parameter
			job helloName using (name)
				print name
			end

		// without output and without parameter
			job printHello 
				print "Hello"
			end		

	// passing a parameter
		//pass by value
			<job name> using (<LITERAL>,<variable identifier>)

//DEFINE KEYWORDS
//END KEYWORD
	// cannot have any other statements after it in the same line
	// example: end print using ("Hi")
				end x is x + 5